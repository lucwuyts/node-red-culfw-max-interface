[
    {
        "id": "6d9abfcc.68035",
        "type": "tab",
        "label": "Queue test",
        "disabled": false,
        "info": ""
    },
    {
        "id": "920a783c.b48038",
        "type": "debug",
        "z": "6d9abfcc.68035",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 120,
        "wires": []
    },
    {
        "id": "2dca894d.075cf6",
        "type": "inject",
        "z": "6d9abfcc.68035",
        "name": "{\"DeviceId\":\"137a0a\",\"MsgId\":\"Test1\"}",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"DeviceId\":\"137a0a\",\"MsgId\":\"Test1\"}",
        "payloadType": "json",
        "x": 250,
        "y": 120,
        "wires": [
            [
                "6b67f258.9e1ffc"
            ]
        ]
    },
    {
        "id": "358d1def.0fa1d2",
        "type": "inject",
        "z": "6d9abfcc.68035",
        "name": "{\"DeviceId\":\"137a0a\",\"MsgId\":\"Test2\"}",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"DeviceId\":\"137a0a\",\"MsgId\":\"Test2\"}",
        "payloadType": "json",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "6b67f258.9e1ffc"
            ]
        ]
    },
    {
        "id": "cd9d37f0.3d7938",
        "type": "inject",
        "z": "6d9abfcc.68035",
        "name": "{\"DeviceId\":\"037a0b\",\"MsgId\":\"Test1\"}",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"DeviceId\":\"037a0b\",\"MsgId\":\"Test1\"}",
        "payloadType": "json",
        "x": 250,
        "y": 240,
        "wires": [
            [
                "6b67f258.9e1ffc"
            ]
        ]
    },
    {
        "id": "bc37b52d.37a2e8",
        "type": "inject",
        "z": "6d9abfcc.68035",
        "name": "{\"DeviceId\":\"037a0b\",\"MsgId\":\"Test2\"}",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"DeviceId\":\"037a0b\",\"MsgId\":\"Test2\"}",
        "payloadType": "json",
        "x": 250,
        "y": 280,
        "wires": [
            [
                "6b67f258.9e1ffc"
            ]
        ]
    },
    {
        "id": "6b67f258.9e1ffc",
        "type": "function",
        "z": "6d9abfcc.68035",
        "name": "Queue",
        "func": "// messages need to be separated from each other when sending.\n// this queue holds messages.\n//\n// if a message arrives for the same device with the same message id, \n// than an existing message, the old message is replaced with the new.\n//----------------------------------------------------------------------\nvar queue = context.get(\"queue\") || [];\n\nif( typeof(msg.payload) != 'boolean' ){\n    var obj = msg.payload;\n    var ix = -1;\n    for( i = 0 ; i < queue.length; i++){\n        var el = queue[i];\n        if( el.DeviceId == obj.DeviceId && el.MsgId == obj.MsgId ){\n            ix = i;\n            break;\n        }\n    }\n    if( ix >= 0){\n        queue[ix] = obj;\n    }else{\n        queue.push(obj);\n    }\n    // send empty message\n    msg = null;\n}\nelse{\n    if( queue.length > 0){\n        msg = {payload: queue.shift() };\n    }else{\n        msg = null;\n    }\n}\n\ncontext.set(\"queue\",queue);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 120,
        "wires": [
            [
                "920a783c.b48038"
            ]
        ]
    },
    {
        "id": "a2ab2153.39dfc",
        "type": "inject",
        "z": "6d9abfcc.68035",
        "name": "Queue Sending rate",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 680,
        "y": 60,
        "wires": [
            [
                "6b67f258.9e1ffc"
            ]
        ]
    }
]